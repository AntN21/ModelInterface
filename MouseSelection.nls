breed [circles circle] ; the turtles being selected
breed [sides side]     ; the four sides of the selection rectangle

globals [
  current-state ; "not-started", "selecting", "waiting-to-drag", "dragging"
  select-x      ; coordinates for the start of the select box
  select-y
  drag-x        ; coordinates for the start of a drag operation
  drag-y
  selected      ; agentset of currently selected circles
]

to setup-mouse
  
  set current-state "not-started"
  set-default-shape circles "circle"
  set-default-shape sides "line"
  
  ; initially, no turtles are selected
  set selected no-turtles
  reset-ticks
end

to go [r]
  ; we use a different procedure depending on which state we're in
  ; the procedures will update the `current-state` to the next value as the user clicks
  (ifelse
    (current-state = "not-started")     [ start-selecting ]
    (current-state = "selecting")       [ handle-selecting ]
    (current-state = "waiting-to-drag") [ handle-waiting r ]
    (current-state = "dragging")        [ handle-drag ]
  )
end

to start-selecting 
  if mouse-down? [
    ; on the first click we see, we record the mouse position as the start of selection
    set select-x mouse-xcor
    set select-y mouse-ycor
    set current-state "selecting"
  ]
end

to handle-selecting
  ifelse mouse-down? [
    ; we keep updating the selection box as long as the mouse is down
    select select-x select-y mouse-xcor mouse-ycor
  ][
    ; user was selecting, but let off the mouse button
    ifelse not any? selected [
      ; if nothing was selected in the box, return to the not-started state

      set current-state "not-started"
    ] [
      ; else we are ready to drag
      set current-state "waiting-to-drag"
    ]
  ]
  display
end

to handle-waiting [r]
  
  ask selected [
    set region r
    set pcolor co r
  ]
  deselect
  set current-state "not-started"
end

to handle-drag
  ifelse mouse-down? [
    let new-x mouse-xcor
    let new-y mouse-ycor
    ; we need to move both the selected turtles and the sides
    ; of the selection rectangle by the same amount that the
    ; mouse has moved.  we do this by subtracting the current
    ; mouse coordinates from the previous mouse coordinates
    ; and adding the results to the coordinates of the turtles
    ; and sides.
    ask selected
    [
      setxy xcor + new-x - drag-x
      ycor + new-y - drag-y
    ]
    ask sides
    [
      setxy xcor + new-x - drag-x
      ycor + new-y - drag-y
    ]
    ; update the drag coordinates for the next time through
    ; if the user keeps the mouse button down
    set drag-x new-x
    set drag-y new-y
    display
  ] [
    ; user was dragging, but let off the mouse button
    ; wait for them to click again
    set current-state "waiting-to-drag"
  ]
end

to deselect
  ask sides [ die ]
  set selected no-patches
end

to select [x1 y1 x2 y2] ; x1 y1 is initial corner and x2 y2 is current corner
  deselect ; kill old selection rectangle
  make-side x1 y1 x2 y1
  make-side x1 y1 x1 y2
  make-side x1 y2 x2 y2
  make-side x2 y1 x2 y2
  set selected patches with [selected? pxcor pycor]
  ;ask selected [ set pcolor red ]
end

to make-side [x1 y1 x2 y2]
  ; for each side, one thin line shape is created at the mid point of each segment
  ; of the bounding box and scaled to the proper length
  create-sides 1 [
    set color gray
    setxy (x1 + x2) / 2
          (y1 + y2) / 2
    facexy x1 y1
    set size 2 * distancexy x1 y1
  ]
end

; helper procedure that determines whether a point is
; inside the selection rectangle
to-report selected? [x y]
  let y-max max [ycor] of sides  ; largest ycor is where the top is
  let y-min min [ycor] of sides  ; smallest ycor is where the bottom is
  let x-max max [xcor] of sides  ; largest xcor is where the right side is
  let x-min min [xcor] of sides  ; smallest xcor is where the left side is
  ; report whether the input coordinates are within the rectangle
  report x >= x-min and x <= x-max and
         y >= y-min and y <= y-max
end


; Public Domain:
; To the extent possible under law, Uri Wilensky has waived all
; copyright and related or neighboring rights to this model.